This is fdroid.info, produced by makeinfo version 4.13 from
/home/sachin/Downloads/f-droid-fdroidserver/docs/fdroid.texi.

This manual is for the F-Droid repository server tools.

   Copyright (C) 2010, 2011, 2012, 2013 Ciaran Gultnieks Copyright (C)
2011 Henrik Tunedal, Michael Haas, John Sullivan

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".


File: fdroid.info,  Node: Top,  Next: Overview,  Up: (dir)

F-Droid Server
**************

This manual is for the F-Droid repository server tools.

   Copyright (C) 2010, 2011, 2012, 2013 Ciaran Gultnieks Copyright (C)
2011 Henrik Tunedal, Michael Haas, John Sullivan

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

* Menu:

* Overview::
* System Requirements::
* Setup::
* Simple Binary Repository::
* Building Applications::
* Importing Applications::
* Metadata::
* Update Processing::
* Build Server::
* Signing::
* GNU Free Documentation License::
* Index::


File: fdroid.info,  Node: Overview,  Next: System Requirements,  Prev: Top,  Up: Top

1 Overview
**********

The F-Droid server tools provide various scripts and tools that are used
to maintain the main F-Droid application repository. You can use these
same tools to create your own additional or alternative repository for
publishing, or to assist in creating, testing and submitting metadata
to the main repository.


File: fdroid.info,  Node: System Requirements,  Next: Setup,  Prev: Overview,  Up: Top

2 System Requirements
*********************

The system requirements for using the tools will vary depending on your
intended usage. At the very least, you'll need:

   * GNU/Linux

   * Python 2.x

   * The Android SDK

   If you intend to build applications from source you'll also need
most, if not all, of the following:

   * All available SDK platforms and tools installed in the Android
     SDK, but *not* the proprietary components.

   * The Android NDK

   * Ant

   * Ant Contrib Tasks (Debian package ant-contrib)

   * Maven (Debian package maven2)

   * JavaCC (Debian package javacc)

   * JDK (Debian package openjdk-6-jdk)

   * VCS clients: svn, git, git-svn, hg, bzr

   * A keystore for holding release keys. (Safe, secure and well backed
     up!)

   If you intend to use the 'Build Server' system, for secure and clean
builds (highly recommended), you will also need:

   * VirtualBox (debian package virtualbox-ose)

   * Ruby (debian packages ruby and rubygems)

   * Vagrant (gem install vagrant)

   * Paramiko (debian package python-paramiko)


File: fdroid.info,  Node: Setup,  Next: Simple Binary Repository,  Prev: System Requirements,  Up: Top

3 Setup
*******

Because the tools and data will always change rapidly, you will almost
certainly want to work from a git clone of the tools at this stage. To
get started:

     git clone git://gitorious.org/f-droid/fdroidserver.git

   You now have lots of stuff in the fdroidserver directory, but the
most important is the 'fdroid' command script which you run to perform
all tasks.  This script is always run from a repository data directory,
so the most sensible thing to do next is to put your new fdroidserver
directory in your `PATH'.

3.1 Data
========

To do anything, you'll need at least one repository data directory. It's
from this directory that you run the `fdroid' command to perform all
repository management tasks. You can either create a brand new one, or
grab a copy of the data used by the main F-Droid repository:

     git clone git://gitorious.org/f-droid/fdroiddata.git

   Regardless of the intended usage of the tools, you will always need
to set up some basic configuration details. This is done by creating a
file called `config.py' in the data directory. You should do this by
copying the example file (`config.sample.py') from the fdroidserver
project to your data directory and then editing according to the
instructions within.

   Once configured in this way, all the functionality of the tools is
accessed by running the `fdroid' command. Run it on its own to get a
list of the available sub-commands.

   You can follow any command with `--help' to get a list of additional
options available for that command.

     fdroid update --help


File: fdroid.info,  Node: Simple Binary Repository,  Next: Building Applications,  Prev: Setup,  Up: Top

4 Simple Binary Repository
**************************

If you want to maintain a simple repository hosting only binary APKs
obtained and compiled elsewhere, the process is quite simple:

  1. Set up the server tools, as described in Setup.

  2. Make a directory for your repository. This is the directory from
     which you will do all the work with your repository. Create a
     config file there, called `config.py', by copying the
     `config.sample.py' from the server project and editing it.

  3. Within that, make a directory called `repo' and put APK files in
     it.

  4. Run `fdroid update'.

  5. If it reports that any metadata files are missing, you can create
     them in the `metadata' directory and run it again.

  6. To ease creation of metadata files, run `fdroid update' with the
     `-c' option. It will create 'skeleton' metadata files that are
     missing, and you can then just edit them and fill in the details.

  7. Then, if you've changed things, run `fdroid update' again.

  8. Running `fdroid update' adds an Icons directory into the repo
     directory, and also creates the repository index (index.xml, and
     also index.jar if you've configured the system to use a signed
     index).

  9. Publish the resulting contents of the `repo' directory to your web
     server.

   Following the above process will result in a `repo' directory, which
you simply need to push to any HTTP (or preferably HTTPS) server to
make it accessible.

   While some information about the applications (and versions thereof)
is retrieved directly from the APK files, most comes from the
corresponding file in the `metadata' directory. The metadata file
covering ALL versions of a particular application is named
`package.id.txt' where package.id is the unique identifier for that
package.

   See the Metadata chapter for details of what goes in the metadata
file. All fields are relevant for binary APKs, EXCEPT for 'Build
Version' entries, which should be omitted.


File: fdroid.info,  Node: Building Applications,  Next: Importing Applications,  Prev: Simple Binary Repository,  Up: Top

5 Building Applications
***********************

Instead of (or as well as) including binary APKs from external sources
in a repository, you can build them directly from the source code.

   Using this method, it is is possible to verify that the application
builds correctly, corresponds to the source code, and contains only
free software.  Unforunately, in the Android world, it seems to be very
common for an application supplied as a binary APK to present itself as
Free Software when in fact some or all of the following are true:

  1. The source code (either for a particular version, or even all
     versions!) is unavailable or incomplete.

  2. The source code is not capable of producing the actual binary
     supplied.

  3. The 'source code' contains binary files of unknown origin, or with
     proprietary licenses.

   For this reason, source-built applications are the preferred method
for the main F-Droid repository, although occasionally for technical or
historical reasons, exceptions are made to this policy.

   When building applications from source, it should be noted that you
will be signing them (all APK files must be signed to be installable on
Android) with your own key. When an application is already installed on
a device, it is not possible to upgrade it in place to a new version
signed with a different key without first uninstalling the original.
This may present an inconvenience to users, as the process of
uninstalling loses any data associated with the previous installation.

   The process for managing a repository for built-from-source
applications is very similar to that described in the Simple Binary
Repository chapter, except now you need to:

  1. Include Build Version entries in the metadata files.

  2. Run `fdroid build' to build any applications that are not already
     built.

  3. Run `fdroid publish' to finalise packaging and sign any APKs that
     have been built.

5.1 More about "fdroid build"
=============================

When run without any parameters, `fdroid build' will build any and all
versions of applications that you don't already have in the `repo'
directory (or more accurately, the `unsigned' directory). There are
various other things you can do. As with all the tools, the `--help'
option is your friend, but a few annotated examples and discussion of
the more common usage modes follows:

   To build a single version of a single application, you could run the
following:

     ./fdroid build --package=org.fdroid.fdroid --vercode 16

   This attempts to build version code 16 (which is version 0.25) of
the F-Droid client. Many of the tools recognise this `--package'
parameter, allowing their activity to be limited to just a single
package.

   If the build above was succesful, two files will have been placed in
the `unsigned' directory:

     org.fdroid.fdroid_16.apk
     org.fdroid.fdroid_16_src.tar.gz

   The first is the (unsigned) APK. You could sign this with a debug
key and push it direct to your device or an emulator for testing. The
second is a source tarball containing exactly the source that was used
to generate the binary.

   If you were intending to publish these files, you could then run:

     ./fdroid publish

   The source tarball would move to the `repo' directory (which is the
directory you would push to your web server). A signed and zip-aligned
version of the APK would also appear there, and both files would be
removed from the `unsigned' directory.

   If you're building purely for the purposes of testing, and not
intending to push the results to a repository, at least yet, the
`--test' option can be used to direct output to the `tmp' directory
instead of `unsigned'.  A similar effect could by achieved by simply
deleting the output files from `unsigned' after the build, but with the
risk of forgetting to do so!

   Along similar lines (and only in conjunction with `--test', you can
use `--force' to force a build of a Disabled application for test
purposes, where normally it would be completely ignored.

5.2 Direct Installation
=======================

You can also build and install directly to a connected device or
emulator using the `--install' switch. If you do this without using
`--package' and `--vercode' then all versions of all packages will be
installed (with each individual version overwriting the previous!). In
most cases, this will not be what you want to do, so execution will
stop straight away. However, you can override this if you're sure
that's what you want, by using `--all'.


File: fdroid.info,  Node: Importing Applications,  Next: Metadata,  Prev: Building Applications,  Up: Top

6 Importing Applications
************************

To help with starting work on including a new application, `fdroid
import' will take a URL and optionally some other parameters, and
attempt to construct as much information as possible by analysing the
source code. Basic usage is:

     ./fdroid import --url=http://address.of.project

   For this to work, the URL must point to a project format that the
script understands. Currently this is limited to one of the following:

  1. Gitorious - `https://gitorious.org/PROJECTNAME/REPONAME'

  2. Github - `https://github.com/USER/PROJECT'

  3. Google Code - `http://code.google.com/p/PROJECT/' Supports git,
     svn and hg repos.

     Some Google Code projects have multiple repositories, identified
     by a dropdown list on the `source/checkout' page. To access one
     other than the default, specify its name using the `--repo' switch.

  4. Bitbucket - `https://bitbucket.org/USER/PROJECT/'

  5. Git - `git://REPO'

   Depending on the project type, more or less information may be
gathered. For example, the license will be retrieved from a Google Code
project, but not a GitHub one. A bare repo url, such as the git:// one,
is the least preferable optional of all, since you will have to enter
much more information manually.

   If the import is successful, a metadata file will be created. You
will need to edit this further to check the information, and fill in
the blanks.

   If it fails, you'll be told why. If it got as far as retrieving the
source code, you can inspect it further by looking in `tmp/importer'
where a full checkout will exist.

   A frequent cause of initial failure is that the project directory is
actually a subdirectory in the repository. In this case, run the
importer again using the `--subdir' option to tell it where. It will
not attempt to determine this automatically, since there may be several
options.


File: fdroid.info,  Node: Metadata,  Next: Update Processing,  Prev: Importing Applications,  Up: Top

7 Metadata
**********

Information used by update.py to compile the public index comes from two
sources:

  1. the APK files in the repo directory, and

  2. the metadata files in the metadata directory.

   The metadata files are simple, easy to edit text files, always named
as the application's package ID with '.txt' appended.

   Note that although the metadata files are designed to be easily read
and writable by humans, they are also processed and written by various
scripts.  They are capable of rewriting the entire file when necessary.
Even so, the structure and comments will be preserved correctly,
although the order of fields will be standardised. (In the event that
the original file was in a different order, comments are considered as
being attached to the field following them). In fact, you can
standardise all the metadata in a single command, without changing the
functional content, by running:

     fdroid rewritemetadata

   The following sections describe the fields recognised within the
file.

* Menu:

* Category::
* License::
* Name::
* Web Site::
* Source Code::
* Issue Tracker::
* Donate::
* FlattrID::
* Bitcoin::
* Summary::
* Description::
* Repo Type::
* Repo::
* Build Version::
* AntiFeatures::
* Disabled::
* Requires Root::
* Update Check Mode::
* Auto Update Mode::
* Current Version::
* Current Version Code::
* No Source Since::


File: fdroid.info,  Node: Category,  Next: License,  Up: Metadata

7.1 Category
============

A single category for the application to be placed in. There is no
fixed list of categories - both the client and the web site will
automatically show any categories that exist in any applications.
However, if your metadata is intended for the main F-Droid repository,
you should use one of the existing categories (look at the
site/client), or discuss the proposal to add a new one.

   Additional categories can be specified, by using ';' as a separator.
In this case the first is the primary category, and the only one that
will be seen by clients that only understand one.


File: fdroid.info,  Node: License,  Next: Name,  Prev: Category,  Up: Metadata

7.2 License
===========

The license for the application.

   Common values:

   * `GPLv2' GNU GPL version 2

   * `GPLv2+' GNU GPL version 2 or later

   * `GPLv3' GNU GPL version 3

   * `GPLv3+' GNU GPL version 3 or later

   * `GPL' An unspecified GPL version. Use this only as a last resort.

   * `AGPL' Afferro GPL version 3.

   * `Apache2' Apache 2

   * `MIT' MIT X11 license

   * `BSD' BSD license - the original '4-clause' version.

   * `NewBSD' BSD license - the new, or modified, version.



File: fdroid.info,  Node: Name,  Next: Web Site,  Prev: License,  Up: Metadata

7.3 Name
========

The name of the application. Normally, this field should not be present
since the application's correct name is retrieved from the APK file.
However, in a situation where an APK contains a bad or missing
application name, it can be overridden using this.


File: fdroid.info,  Node: Web Site,  Next: Source Code,  Prev: Name,  Up: Metadata

7.4 Web Site
============

The URL for the application's web site.


File: fdroid.info,  Node: Source Code,  Next: Issue Tracker,  Prev: Web Site,  Up: Metadata

7.5 Source Code
===============

The URL to view or obtain the application's source code. This should be
something human-friendly. Machine-readable source-code is covered in the
'Repo' field.


File: fdroid.info,  Node: Issue Tracker,  Next: Donate,  Prev: Source Code,  Up: Metadata

7.6 Issue Tracker
=================

The URL for the application's issue tracker. Optional, since not all
applications have one.


File: fdroid.info,  Node: Donate,  Next: FlattrID,  Prev: Issue Tracker,  Up: Metadata

7.7 Donate
==========

The URL to donate to the project. This should be the project's donate
page if it has one.

   It is possible to use a direct PayPal link here, if that is all that
is available. However, bear in mind that the developer may not be aware
of that direct link, and if they later changed to a different PayPal
account, or the PayPal link format changed, things could go wrong. It
is always best to use a link that the developer explicitly makes
public, rather than something that is auto-generated 'button code'.


File: fdroid.info,  Node: FlattrID,  Next: Bitcoin,  Prev: Donate,  Up: Metadata

7.8 FlattrID
============

The project's Flattr (http://flattr.com) ID, if it has one. This should
be a numeric ID, such that (for example) https://flattr.com/thing/xxxx
leads directly to the page to donate to the project.


File: fdroid.info,  Node: Bitcoin,  Next: Summary,  Prev: FlattrID,  Up: Metadata

7.9 Bitcoin
===========

A bitcoin address for donating to the project.


File: fdroid.info,  Node: Summary,  Next: Description,  Prev: Bitcoin,  Up: Metadata

7.10 Summary
============

A brief summary of what the application is.


File: fdroid.info,  Node: Description,  Next: Repo Type,  Prev: Summary,  Up: Metadata

7.11 Description
================

A full description of the application. This can span multiple lines
(which should be kept to a maximum of 80 characters), and is terminated
by a line containing a single '.'.

   Basic MediaWiki-style formatting can be used. Leaving a blank line
starts a new paragraph. Surrounding text with `''' make it italic, and
with `'''' makes it bold.

   You can link to another app in the repo by using `[[app.id]]'. The
link will be made appropriately whether in the Android client, the web
repo browser or the wiki. The link text will be the apps name.

   Links to web addresses can be done using `[http://example.com Text]'.

   Bulletted lists are done by simply starting each item with a `*' on
a new line, and numbered lists are the same but using `#'. There is
currently no support for nesting lists - you can have one level only.


File: fdroid.info,  Node: Repo Type,  Next: Repo,  Prev: Description,  Up: Metadata

7.12 Repo Type
==============

The type of repository - for automatic building from source. If this is
not specified, automatic building is disabled for this application.
Possible values are:

   * `git'

   * `svn'

   * `git-svn'

   * `hg'

   * `bzr'

   * `srclib'


File: fdroid.info,  Node: Repo,  Next: Build Version,  Prev: Repo Type,  Up: Metadata

7.13 Repo
=========

The repository location. Usually a git: or svn: URL, for example.

   The git-svn option connects to an SVN repository, and you specify
the URL in exactly the same way, but git is used as a back-end. This is
preferable for performance reasons, and also because a local copy of
the entire history is available in case the upstream repository
disappears. (It happens!). In order to use Tags as update check mode
for this VCS type, the URL must have the tags= special argument set.
Likewise, if you intend to use the RepoManifest/branch scheme, you
would want to specify branches= as well.  Finally, trunk= can also be
added. All these special arguments will be passed to "git svn" in
order, and their values must be relative paths to the svn repo root dir.
Here's an example of a complex git-svn Repo URL:
http://svn.code.sf.net/p/project/code/svn;trunk=trunk;tags=tags;branches=branches

   For a Subversion repo that requires authentication, you can precede
the repo URL with username:password and those parameters will be passed
as `--username' and `--password' to the SVN checkout command. (This
works only for plain svn and not for git-svn - one of the very few
cases where using svn is advisable).


File: fdroid.info,  Node: Build Version,  Next: AntiFeatures,  Prev: Repo,  Up: Metadata

7.14 Build Version
==================

Any number of these fields can be present, each specifying a version to
automatically build from source. The value is a comma-separated list.
For example:

   `Build Version:0.12,3,651696a49be2cd7db5ce6a2fa8185e31f9a20035'

   The above specifies to build version 0.12, which has a version code
of 3.  The third parameter specifies the tag, commit or revision number
from which to build it in the source repository.

   If the commit version starts with a !, that version is not built.
Instead, everything after the ! is used as a reason why it can't be
built. The purpose of this feature is to allow non-buildable releases
(e.g. the source is not published) to be flagged, so the scripts don't
generate repeated messages about them. (And also to record the
information for review later).

   In addition to the three, always required, parameters described
above, further parameters can be added (in name=value format) to apply
further configuration to the build. These are:

`subdir=<path>'
     Specifies to build from a subdirectory of the checked out source
     code.  Normally this directory is changed to before building,

`bindir=<path>'
     Normally the build output (apk) is expected to be in the bin
     subdirectory below the ant build files. If the project is
     configured to put it elsewhere, that can be specified here,
     relative to the base of the checked out repo.

`oldsdkloc=yes'
     The sdk location in the repo is in an old format, or the build.xml
     is expecting such. The 'new' format is sdk.dir while the VERY OLD
     format is sdk-location. Typically, if you get a message along the
     lines of: "com.android.ant.SetupTask cannot be found" when trying
     to build, then try enabling this option.

`target=<target>'
     Specifies a particular SDK target, when the source doesn't. This is
     likely to cause the whole build.xml to be rewritten, which is fine
     if it's a 'standard' android file or doesn't already exist, but
     not a good idea if it's heavily customised.

`rm=<relpath>'
     Specifies the relative path of file to delete before the build is
     done. The path is relative to the base of the build directory -
     i.e.  the root of the directory structure checked out from the
     source respository - not necessarily the directory that contains
     AndroidManifest.xml.

     Multiple files can be specified by separating they with ';'.

`antcommand=xxx'
     Specify an alternate ant command (target) instead of the default
     'release'.

`forceversion=yes'
     If specified, the package version in AndroidManifest.xml is
     replaced with the version name for the build as specified in the
     metadata.

     This is useful for cases when upstream repo failed to update it for
     specific tag, or to build an arbitrary revision.

`forcevercode=yes'
     If specified, the package version code in the AndroidManifest.xml
     is replaced with the version code for the build. See also
     forceversion.

`update=xxx'
     By default, 'android update project' is used to generate or update
     the build.xml file. Specifying update=no bypasses that.

     Specifiying update=force forces rebuilding of the build.xml file
     at the same time - this is frequently needed with r14 of the
     Android platform tools. Be aware of any customisations in
     build.xml when using update=force.

     Otherwise, value can be a semicolon-separated list of directories
     in which to run 'android update project' relative to the main
     application directory (which may include '`subdir'' parameter).
     Default value is '`.'', and passing non-default value may be
     useful for multi-component projects. Note that `--subprojects'
     switch is automatically passed to 'android update project', so
     using explicit list may be needed only for peculiar source layouts.

`initfun=yes'
     Enables a selection of mad hacks to make com.funambol.android
     build.  Probably not useful for any other application.

`buildjni=[yes|no|<dir list>]'
     Enables building of native code via the ndk-build script before
     doing the main ant build. The value may be a list of directories
     relative to the main application directory in which to run
     ndk-build, or 'yes' which corresponds to '.' . Using explicit list
     may be useful to build multi-component projects.

     The build and scan processes will complain (refuse to build) if
     this parameter is not defined, but there is a `jni' directory
     present.  If the native code is being built by other means, you
     can specify `no' here to avoid that. However, if the native code
     is actually not required, remove the directory instead (using
     `prebuild' for example).

`scanignore=path1;path2;...'
     Enables one or more files/paths to be exlcuded from the scan
     process.  This should only be used where there is a very good
     reason, and probably accompanied by a comment explaining why it is
     necessary.

     When scanning, files whose relative paths start with any of the
     paths given here are ignored.

`submodules=yes'
     Use if the project (git only) has submodules - causes git submodule
     init and update to be executed after the source is cloned.

`encoding=xxxx'
     Adds a java.encoding property to local.properties with the given
     value. Generally the value will be 'utf-8'. This is picked up by
     the SDK's ant rules, and forces the Java compiler to interpret
     source files with this encoding. If you receive warnings during
     the compile about character encodings, you probably need this.

`prebuild=xxxx'
     Specifies a shell command (or commands - chain with &&) to run
     before the build takes place. Backslash can be used as an escape
     character to insert literal commas, or as the last character on a
     line to join that line with the next. It has no special meaning in
     other contexts; in particular, literal backslashes should not be
     escaped.

     The command runs using bash.

     Note that nothing should be build during this prebuild phase -
     scanning of the code and building of the source tarball, for
     example, take place after this. For custom actions that actually
     build things, use 'build' instead.

     You can use $$name$$ to substitute the path to a referenced srclib
     - see the `srclib' directory for details of this.

     You can use $$SDK$$, $$NDK$$ and $$MVN3$$ to substitute the paths
     to the android SDK and NDK directories, and maven 3 executable
     respectively.

`init=xxxx'
     As for 'prebuild', but runs on the source code BEFORE any other
     processing takes place.

     You can use $$SDK$$, $$NDK$$ and $$MVN3$$ to substitute the paths
     to the android SDK and NDK directories, and maven 3 executable
     respectively.

`build=xxxx'
     As for 'prebuild', but runs during the actual build phase (but
     before the main ant/maven build). Use this only for actions that
     do actual building.  Any prepartion of the source code should be
     done using 'init' or 'prebuild'.

     You can use $$SDK$$, $$NDK$$ and $$MVN3$$ to substitute the paths
     to the android SDK and NDK directories, and maven 3 executable
     respectively.

`novcheck=yes'
     Don't check that the version name and code in the resulting apk are
     correct by looking at the build output - assume the metadata is
     correct. This takes away a useful level of sanity checking, and
     should only be used if the values can't be extracted.

`fixtrans=yes'
     Modifies any instances of string resources that use multiple
     formatting arguments, but don't use positional notation. For
     example, "Hello %s, %d" becomes "Hello %1$s, %2$d". Newer versions
     of the Android platform tools enforce this sensible standard. If
     you get error messages relating to that, you need to enable this.

`fixapos=yes'
     Like fixtrans, but deals with an even older issue relating to
     'unescaped apostrophes' in translation strings.

`maven=yes'
     Build with maven instead of ant

`patch=x'
     Apply patch(es). 'x' names one (or more - comma-seperated) files
     within a directory below the metadata, with the same name as the
     metadata file but without the extension. Each of these patches is
     applied to the code in turn.

`extlibs=a;b;c'
     Specifies a list of external libraries (jar files) from the
     `build/extlib' library, which will be placed in the `libs'
     directory of the project. Separate items with semicolons.

`srclibs=a@r;b@r1;'
     Specifies a list of source libraries (kept up to date using
     version control) from a predefined set. Separate items with
     semicolons, and each item is of the form name@rev where name is
     the predefined source library name and rev is the revision in
     source control to use. You can then also use $$name$$ in the
     prebuild command to substitute the relative path to the library
     directory.

     The available source libraries are current hard-coded in
     common.py. This will later be data-driven.


   Another example, using extra parameters:

   `Build Version:1.09.03,10903,45,subdir=Timeriffic,oldsdkloc=yes'


File: fdroid.info,  Node: AntiFeatures,  Next: Disabled,  Prev: Build Version,  Up: Metadata

7.15 AntiFeatures
=================

This is optional - if present, it contains a comma-separated list of
any of the following values, describing an AntiFeature the application
has:

   * `Ads' - the application contains advertising.

   * `Tracking' - the application tracks and reports your activity to
     somewhere without your consent.

   * `NonFreeNet' - the application promotes a non-Free network service.

   * `NonFreeAdd' - the application promotes non-Free add-ons.

   * `NonFreeDep' - the application depends on a non-Free application
     (e.g.  Google Maps) - i.e. it requires it to be installed on the
     device, but does not include it.



File: fdroid.info,  Node: Disabled,  Next: Requires Root,  Prev: AntiFeatures,  Up: Metadata

7.16 Disabled
=============

If this field is present, the application does not get put into the
public index. This allows metadata to be retained while an application
is temporarily disabled from being published. The value should be a
description of why the application is disabled.


File: fdroid.info,  Node: Requires Root,  Next: Update Check Mode,  Prev: Disabled,  Up: Metadata

7.17 Requires Root
==================

Set this optional field to "Yes" if the application requires root
privileges to be usable. This lets the client filter it out if the user
so desires.


File: fdroid.info,  Node: Update Check Mode,  Next: Auto Update Mode,  Prev: Requires Root,  Up: Metadata

7.18 Update Check Mode
======================

This determines the method using for determining when new releases are
available - in other words, the updating of the Current Version and
Current Version Code fields in the metadata by the `fdroid
checkupdates' process.

   Valid modes are:

   * `None' - No checking is done because there's no appropriate
     automated way of doing so. Updates should be checked for manually.

   * `Static' - No checking is done—either development has ceased or
     new versions are not desired. This method is also used when there
     is no other checking method available and the upstream developer
     keeps us posted on new versions.

   * `RepoManifest' - The AndroidManifest.xml file in the most recent
     commit in the source repository is checked. The appropriateness of
     this method depends on the development process used by the
     application's developers. You should not specify this method
     unless you're sure it's appropriate.  It currently works for every
     repository type excepting bzr. For git repos, the branch used
     defaults to master. You may specify your own by using
     "RepoManifest/yourbranch" as UCM. The same applies to hg, in which
     case the default value is the "default" branch.

   * `Tags' - The AndroidManifest.xml file in all tagged revisions in
     the source repository is checked, looking for the highest version
     code. The appropriateness of this method depends on the
     development process used by the application's developers. You
     should not specify this method unless you're sure it's
     appropriate. It currently only works for git and git-svn
     repositories. In the case of the latter, the repo URL must encode
     the path to the trunk and tags.

   * `Market' - This is being phased out and should only be used when
     the other automatic modes don't work.


File: fdroid.info,  Node: Auto Update Mode,  Next: Current Version,  Prev: Update Check Mode,  Up: Metadata

7.19 Auto Update Mode
=====================

This determines the method using for auto-generating new builds new
releases are available - in other words, adding a new Build Version
line to the metadata.  This happens in conjunction with the 'Update
Check Mode' functionality - i.e.  when an update is detected by that,
it is also processed by this.

   Valid modes are:

   * `None' - No auto-updating is done

   * `Version' - Identifies the target commit (i.e. tag) for the new
     build based on the given version specification, which is simply
     text in which %v and %c are replaced with the required version
     name and version code respectively.

     For example, if an app always has a tag "2.7.2" corresponding to
     version 2.7.2, you would simply specify "Version %v". If an app
     always has a tag "ver_1234" for a version with version code 1234,
     you would specify "Version ver_%c".

     Additionally, a suffix can be added to the version name at this
     stage, to differentiate F-Droid's build from the original.
     Continuing the first example above, you would specify that as
     "Version +-fdroid %v" - "-fdroid" is the suffix.


File: fdroid.info,  Node: Current Version,  Next: Current Version Code,  Prev: Auto Update Mode,  Up: Metadata

7.20 Current Version
====================

The name of the version that is current. There may be newer versions of
the application than this (e.g. betas), and there will almost certainly
be older ones. This should be the one that is recommended for general
use.

   This field is normally automatically updated - see Update Check Mode.


File: fdroid.info,  Node: Current Version Code,  Next: No Source Since,  Prev: Current Version,  Up: Metadata

7.21 Current Version Code
=========================

The version code corresponding to the Current Version field. Both these
fields must be correct and matching.

   This field is normally automatically updated - see Update Check Mode.


File: fdroid.info,  Node: No Source Since,  Prev: Current Version Code,  Up: Metadata

7.22 No Source Since
====================

In case we are missing the source code for the Current Version reported
by Upstream, this defines the first version that started missing source
code.  Apps that are missing source code for just one or a few
versions, but provide source code for newer ones are not to be
considered here - this field is intended to illustrate which apps do
not currently distribute source code, and since when have they been
doing so.


File: fdroid.info,  Node: Update Processing,  Next: Build Server,  Prev: Metadata,  Up: Top

8 Update Processing
*******************

8.1 Detecting
=============

There are various mechanisms in place for automatically detecting that
updates are available for applications, with the `Update Check Mode'
field in the metadata determining which method is used for a particular
application.

   Running the `fdroid checkupdates' command will apply this method to
each application in the repository and update the `Current Version' and
`Current Version Code' fields in the metadata accordingly.

   As usual, the `-p' option can be used with this, to restrict
processing to a particular application.

   Note that this only updates the metadata such that we know what the
current published/recommended version is. It doesn't make that version
available in the repository - for that, see the next section.

8.2 Adding
==========

Adding updates (i.e. new versions of applications already included in
the repository) happens in two ways. The simple case is applications
where the APK files are binaries, retrieved from a developer's
published build. In this case, all that's required is to place the new
binary in the `Repo' directory, and the next run of `fdroid update'
will pick it up.

   For applications built from source, it is necessary to add a new
`Build Version' line to the metadata file. At the very least, the
version name, version code and commit will be different. It is also
possible that the additional build flags will change between versions.

   For processing multiple updates in the metadata at once, it can be
useful to run `fdroid update --interactive'. This will check all the
applications in the repository, and where updates are required you will
be prompted to [E]dit the metadata, [I]gnore the update, or [Q]uit
altogether.


File: fdroid.info,  Node: Build Server,  Next: Signing,  Prev: Update Processing,  Up: Top

9 Build Server
**************

The Build Server system isolates the builds for each package within a
clean, isolated and secure throwaway virtual machine environment.

9.1 Overview
============

Building applications in this manner on a large scale, especially with
the involvement of automated and/or unattended processes, could be
considered a dangerous pastime from a security perspective. This is
even more the case when the products of the build are also distributed
widely and in a semi-automated ("you have updates available") fashion.

   Assume that an upstream source repository is compromised. A small
selection of things that an attacker could do in such a situation:

  1. Use custom ant build steps to execute virtually anything as the
     user doing the build.

  2. Access the keystore.

  3. Modify the built apk files or source tarballs for other
     applications in the repository.

  4. Modify the metadata (which includes build scripts, which again,
     also includes the ability to execute anything) for other
     applications in the repository.

   Through complete isolation, the repurcussions are at least limited
to the application in question. Not only is the build environment fresh
for each build, and thrown away afterwards, but it is also isolated
from the signing environment.

   Aside from security issues, there are some applications which have
strange requirements such as custom versions of the NDK. It would be
impractical (or at least extremely messy) to start modifying and
restoring the SDK on a multi-purpose system, but within the confines of
a throwaway single-use virtual machine, anything is possible.

   All this is in addition to the obvious advantage of having a
standardised and completely reproducible environment in which builds
are made. Additionally, it allows for specialised custom build
environments for particular applications.

9.2 Setting up a build server
=============================

In addition to the basic setup previously described, you will also need
a Vagrant-compatible Ubuntu Raring base box called 'raring32' (or
raring64 for a 64-bit VM, if you want it to be much slower, and require
more disk space).

   You can use a different version or distro for the base box, so long
as you don't expect any help making it work. One thing to be aware of
is that working copies of source trees are moved from the host to the
guest, so for example, having subversion v1.6 on the host and v1.7 on
the guest would fail.

   Unless you're very trusting. you should create one of these for
yourself from verified standard Ubuntu installation media. However, you
could skip over the next few paragraphs (and sacrifice some security)
by downloading `https://f-droid.org/raring32.box' or
`https://f-droid.org/raring64.box'.

   Documentation for creating a base box can be found at
`http://docs.vagrantup.com/v1/docs/base_boxes.html'.

   In addition to carefully following the steps described there, you
should consider the following:

  1. It is advisable to disable udev network device persistence,
     otherwise any movement of the VM between machines, or
     reconfiguration, will result in broken networking.

     For a Debian/Ubuntu default install, just `touch
     /etc/udev/rules.d/75-persistent-net-generator.rules' to turn off
     rule generation, and at the same time, get rid of any rules it's
     already created in `/etc/udev/rules.d/70-persistent-net.rules'.

  2. Unless you want the VM to become totally inaccessible following a
     failed boot, you need to set `GRUB_RECORDFAIL_TIMEOUT' to a value
     other than -1 in `/etc/grub/default' and then run `update-grub'.

   You may also want to edit `buildserver/Vagrantfile' - in particular
there is a path for retrieving the base box if it doesn't exist, and an
apt proxy definition, both of which may need customising for your
environment.

   With this base box available, you should then look at the settings
at the top of `makebuildserver.py' and see if any need changing to suit
your environment. You can then go to the `fdroidserver' directory and
run this:

     ./makebuildserver.py

   This will take a long time, and use a lot of bandwidth - most of it
spent installing the necessary parts of the Android SDK for all the
various platforms. Luckily you only need to do it occasionally. Once
you have a working build server image, if the recipes change (e.g. when
packages need to be added) you can just run that script again and the
existing one will be updated in place.

   The main sdk/ndk downloads will automatically be cached to speed
things up the next time, but there's no easy way of doing this for the
longer sections which use the SDK's `android' tool to install platforms,
add-ons and tools. However, instead of allowing automatic caching, you
can supply a pre-populated cache directory which includes not only these
downloads, but also .tar.gz files for all the relevant additions. If the
provisioning scripts detect these, they will be used in preference to
running the android tools. For example, if you have
`buildserver/addons/cache/platforms/android-15.tar.gz' that will be
used when installing the android-15 platform, instead of re-downloading
it using `android update sdk --no-ui -t android-15'.

   Once it's complete you'll have a new base box called 'buildserver'
which is what's used for the actual builds. You can then build packages
as normal, but with the addition of the `--server' flag to `fdroid
build' to instruct it to do all the hard work within the virtual
machine.

   The first time a build is done, a new virtual machine is created
using the 'buildserver' box as a base. A snapshot of this clean machine
state is saved for use in future builds, to improve performance. You
can force discarding of this snapshot and rebuilding from scratch using
the `--resetserver' switch with `fdroid build'.


File: fdroid.info,  Node: Signing,  Next: GNU Free Documentation License,  Prev: Build Server,  Up: Top

10 Signing
**********

There are two kinds of signing involved in running a repository - the
signing of the APK files generated from source builds, and the signing
of the repo index itself. The latter is optional, but very strongly
recommended.

10.1 Repo Index Signing
=======================

When setting up the repository, one of the first steps should be to
generate a signing key for the repository index. This will also create
a keystore, which is a file that can be used to hold this and all other
keys used. Consider the location, security and backup status of this
file carefully, then create it as follows:

   `keytool -genkey -v -keystore my.keystore -alias repokey -keyalg RSA
-keysize 2048 -validity 10000'

   In the above, replace 'my.keystore' with the name of the keystore
file to be created, and 'repokey' with a name to identify the repo
index key by.

   You'll be asked for a password for the keystore, AND a password for
the key.  They shouldn't be the same. In between, you'll be asked for
some identifying details which will go in the certificate.

   The two passwords entered go into `config.py', as `keystorepass' and
`keypass' respectively. The path to the keystore file, and the alias you
chose for the key also go into that file, as `keystore' and
`repo_keyalias' respectively.

10.2 Package Signing
====================

With the repo index signing configured, all that remains to be done for
package signing to work is to set the `keydname' field in `config.py' to
contain the same identifying details you entered before.

   A new key will be generated using these details, for each
application that is built. (If a specific key is required for a
particular application, this system can be overridden using the
`keyaliases' config settings.


File: fdroid.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Signing,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.



File: fdroid.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

Index
*****

 [index ]
* Menu:

* AntiFeatures:                          AntiFeatures.          (line 6)
* Auto Update Mode:                      Auto Update Mode.      (line 6)
* binary:                                Simple Binary Repository.
                                                                (line 6)
* Bitcoin:                               Bitcoin.               (line 6)
* Build Version:                         Build Version.         (line 6)
* Current Version:                       Current Version.       (line 6)
* Current Version Code:                  Current Version Code.  (line 6)
* Description:                           Description.           (line 6)
* Disabled:                              Disabled.              (line 6)
* Donate:                                Donate.                (line 6)
* FlattrID:                              FlattrID.              (line 6)
* installation:                          System Requirements.   (line 6)
* Issue Tracker:                         Issue Tracker.         (line 6)
* license:                               License.               (line 6)
* metadata:                              Metadata.              (line 6)
* Name:                                  Name.                  (line 6)
* No Source Since:                       No Source Since.       (line 6)
* Repo:                                  Repo.                  (line 6)
* Repo Type:                             Repo Type.             (line 6)
* Requires Root:                         Requires Root.         (line 6)
* setup, installation:                   Setup.                 (line 6)
* Source Code:                           Source Code.           (line 6)
* Summary:                               Summary.               (line 6)
* Update Check Mode:                     Update Check Mode.     (line 6)
* Web Site:                              Web Site.              (line 6)



Tag Table:
Node: Top701
Node: Overview1620
Node: System Requirements2041
Node: Setup3204
Node: Simple Binary Repository4884
Node: Building Applications6985
Node: Importing Applications11653
Node: Metadata13667
Node: Category15147
Node: License15821
Node: Name16410
Node: Web Site16767
Node: Source Code16921
Node: Issue Tracker17209
Node: Donate17432
Node: FlattrID18053
Node: Bitcoin18361
Node: Summary18519
Node: Description18679
Node: Repo Type19637
Node: Repo19995
Node: Build Version21308
Node: AntiFeatures30641
Node: Disabled31398
Node: Requires Root31779
Node: Update Check Mode32070
Node: Auto Update Mode34068
Node: Current Version35345
Node: Current Version Code35796
Node: No Source Since36146
Node: Update Processing36696
Node: Build Server38547
Node: Signing44518
Node: GNU Free Documentation License46402
Node: Index70156

End Tag Table
